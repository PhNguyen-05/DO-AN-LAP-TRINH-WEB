package vn.iotstar.starshop.service.impl;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import vn.iotstar.starshop.entity.User;
import vn.iotstar.starshop.repository.UserRepository;
import vn.iotstar.starshop.service.UserService;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    // ‚úÖ ƒêƒÉng nh·∫≠p (so s√°nh m·∫≠t kh·∫©u th∆∞·ªùng)
    @Override
    public User authenticate(String emailOrPhone, String rawPassword) {
    	Optional<User> opt;

        // üîç N·∫øu chu·ªói nh·∫≠p c√≥ k√Ω t·ª± '@' ‚Üí l√† email
        if (emailOrPhone.contains("@")) {
            opt = userRepository.findByEmail(emailOrPhone);
        } 
        else {
            // üîç Ng∆∞·ª£c l·∫°i, gi·∫£ ƒë·ªãnh l√† s·ªë ƒëi·ªán tho·∫°i
            opt = userRepository.findByPhone(emailOrPhone);
        }

        // Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n
        if (opt.isEmpty()) return null;

        User u = opt.get();

        // ‚ö† N·∫øu t√†i kho·∫£n b·ªã kh√≥a
        if (!"Active".equalsIgnoreCase(u.getStatus())) return null;
        // ‚ö† So s√°nh m·∫≠t kh·∫©u th∆∞·ªùng (kh√¥ng m√£ ho√°)
        if (!rawPassword.equals(u.getPasswordHash())) return null;

        return u;
    }

    @Override
    public User findByEmail(String email) {
        return userRepository.findByEmail(email).orElse(null);
    }

    // ‚úÖ ƒêƒÉng k√Ω (l∆∞u m·∫≠t kh·∫©u th∆∞·ªùng, kh√¥ng m√£ ho√°)
    @Override
    public User register(User user) {
        // Ki·ªÉm tra email tr√πng
        if (userRepository.findByEmail(user.getEmail()).isPresent()) {
            throw new IllegalArgumentException("‚ùå Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!");
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá (n·∫øu c√≥)
        if (user.getPhone() != null && !user.getPhone().isBlank()) {
            if (!user.getPhone().matches("^0\\d{9,10}$")) {
                throw new IllegalArgumentException("‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá! (ph·∫£i g·ªìm 10‚Äì11 ch·ªØ s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0)");
            }
        }

        // ‚ö† Kh√¥ng m√£ ho√° m·∫≠t kh·∫©u ‚Äî gi·ªØ nguy√™n chu·ªói nh·∫≠p
        user.setPasswordHash(user.getPasswordHash());

        // Thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh
        user.setStatus("Active");
        if (user.getRole() == null || user.getRole().isBlank()) {
            user.setRole("Customer");
        }
        if (user.getCreatedAt() == null) {
            user.setCreatedAt(LocalDateTime.now());
        }

        // L∆∞u DB
        return userRepository.save(user);
    }
    
    // ‚úÖ L∆∞u ho·∫∑c c·∫≠p nh·∫≠t (d√πng trong reset m·∫≠t kh·∫©u)
    @Override
    public User save(User user) {
        if (user == null) throw new IllegalArgumentException("User is null");

        // ‚ö† Gi·ªØ nguy√™n m·∫≠t kh·∫©u ng∆∞·ªùi nh·∫≠p, kh√¥ng encode
        if (user.getPasswordHash() == null || user.getPasswordHash().isBlank()) {
            throw new IllegalArgumentException("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
        }

        if (user.getCreatedAt() == null) {
            user.setCreatedAt(LocalDateTime.now());
        }

        return userRepository.save(user);
    }

    // ‚úÖ Alias cho save() (ƒë·ªÉ d·ªÖ m·ªü r·ªông)
    @Override
    public User update(User user) {
        return save(user);
    }
}
